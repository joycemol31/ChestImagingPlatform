/**
 * Static class that will be automatically populated using the Resources/ChestConventions.xml file
 */
#ifndef CIP_CIPCHESTCONVENTIONSXMLAUTOGENERATED_H
#define CIP_CIPCHESTCONVENTIONSXMLAUTOGENERATED_H

namespace cip {
/**
 *  Note that chest regions are inherently hierarchical. If you add a
 *  region to the enumerated list below, you should also update the
 *  'ChestRegionHierarchyMap' described below.  Additionally, the
 *  ChestRegions should be updated in the constructor.
 */
    enum ChestRegion {
    UNDEFINEDREGION,
    WHOLELUNG,
    RIGHTLUNG,
    LEFTLUNG,
    RIGHTSUPERIORLOBE,
    RIGHTMIDDLELOBE,
    RIGHTINFERIORLOBE,
    LEFTSUPERIORLOBE,
    LEFTINFERIORLOBE,
    LEFTUPPERTHIRD,
    LEFTMIDDLETHIRD,
    LEFTLOWERTHIRD,
    RIGHTUPPERTHIRD,
    RIGHTMIDDLETHIRD,
    RIGHTLOWERTHIRD,
    MEDIASTINUM,
    WHOLEHEART,
    AORTA,
    PULMONARYARTERY,
    PULMONARYVEIN,
    UPPERTHIRD,
    MIDDLETHIRD,
    LOWERTHIRD,
    LEFT,
    RIGHT,
    LIVER,
    SPLEEN,
    ABDOMEN,
    PARAVERTEBRAL,
    OUTSIDELUNG,
    OUTSIDEBODY,
    SKELETON,
    STERNUM,
    HUMERI,
    LEFTHUMERUS,
    RIGHTHUMERUS,
    SCAPULAE,
    LEFTSCAPULA,
    RIGHTSCAPULA,
    HILA,
    LEFTHILUM,
    RIGHTHILUM,
    KIDNEYS,
    LEFTKIDNEY,
    RIGHTKIDNEY,
    ASCENDINGAORTA,
    TRANSVERSALAORTA,
    DESCENDINGAORTA,
    LEFTSUBCLAVIAN,
    RIGHTSUBCLAVIAN,
    LEFTCORONARYARTERY,
    SPINE,
    LEFTVENTRICLE,
    RIGHTVENTRICLE,
    LEFTATRIUM,
    RIGHTATRIUM,
    LEFTPECTORALIS,
    RIGHTPECTORALIS,
    TRACHEA2,
    LEFTMAINBRONCHUS,
    RIGHTMAINBRONCHUS,
    ESOPHAGUS,
    LEFTCHESTWALL,
    RIGHTCHESTWALL,
    LEFTDIAPHRAGM,
    RIGHTDIAPHRAGM,
    HIATUS,
    PECTORALIS,
    SPINALCORD,
    SUPERIORMESENTERICARTERY,
    PANCREAS,
    PANCREASHEAD,
    LEFTANTERIORCHESTWALL,
    RIGHTANTERIORCHESTWALL,
    LEFTPOSTERIORCHESTWALL,
    RIGHTPOSTERIORCHESTWALL,
    TRACHEACARINA,
    AORTICVALVE,
    VENACAVA,

    };

/**
 *  Some notes about the types below. Segmental bronchi are considered
 *  generation 3, sub-segmental are considered generation 4, etc.
 */
    enum ChestType {
    UNDEFINEDTYPE,
    NORMALPARENCHYMA,
    AIRWAY,
    VESSEL,
    EMPHYSEMATOUS,
    GROUNDGLASS,
    RETICULAR,
    NODULAR,
    OBLIQUEFISSURE,
    HORIZONTALFISSURE,
    MILDPARASEPTALEMPHYSEMA,
    MODERATEPARASEPTALEMPHYSEMA,
    SEVEREPARASEPTALEMPHYSEMA,
    MILDBULLA,
    MODERATEBULLA,
    SEVEREBULLA,
    MILDCENTRILOBULAREMPHYSEMA,
    MODERATECENTRILOBULAREMPHYSEMA,
    SEVERECENTRILOBULAREMPHYSEMA,
    MILDPANLOBULAREMPHYSEMA,
    MODERATEPANLOBULAREMPHYSEMA,
    SEVEREPANLOBULAREMPHYSEMA,
    AIRWAYWALLTHICKENING,
    AIRWAYCYLINDRICALDILATION,
    VARICOSEBRONCHIECTASIS,
    CYSTICBRONCHIECTASIS,
    CENTRILOBULARNODULE,
    MOSAICING,
    EXPIRATORYMALACIA,
    SABERSHEATH,
    OUTPOUCHING,
    MUCOIDMATERIAL,
    PATCHYGASTRAPPING,
    DIFFUSEGASTRAPPING,
    LINEARSCAR,
    CYST,
    ATELECTASIS,
    HONEYCOMBING,
    TRACHEA,
    MAINBRONCHUS,
    UPPERLOBEBRONCHUS,
    AIRWAYGENERATION3,
    AIRWAYGENERATION4,
    AIRWAYGENERATION5,
    AIRWAYGENERATION6,
    AIRWAYGENERATION7,
    AIRWAYGENERATION8,
    AIRWAYGENERATION9,
    AIRWAYGENERATION10,
    CALCIFICATION,
    ARTERY,
    VEIN,
    PECTORALISMINOR,
    PECTORALISMAJOR,
    ANTERIORSCALENE,
    FISSURE,
    VESSELGENERATION0,
    VESSELGENERATION1,
    VESSELGENERATION2,
    VESSELGENERATION3,
    VESSELGENERATION4,
    VESSELGENERATION5,
    VESSELGENERATION6,
    VESSELGENERATION7,
    VESSELGENERATION8,
    VESSELGENERATION9,
    VESSELGENERATION10,
    PARASEPTALEMPHYSEMA,
    CENTRILOBULAREMPHYSEMA,
    PANLOBULAREMPHYSEMA,
    SUBCUTANEOUSFAT,
    VISCERALFAT,
    INTERMEDIATEBRONCHUS,
    LOWERLOBEBRONCHUS,
    SUPERIORDIVISIONBRONCHUS,
    LINGULARBRONCHUS,
    MIDDLELOBEBRONCHUS,
    BRONCHIECTATICAIRWAY,
    NONBRONCHIECTATICAIRWAY,
    AMBIGUOUSBRONCHIECTATICAIRWAY,
    MUSCLE,
    HERNIA,
    BONEMARROW,
    BONE,
    INTERSTITIALLUNGDISEASE,
    SUBPLEURALLINE,
    NODULE,
    BENIGNNODULE,
    MALIGNANTNODULE,
    SEPTUM,
    FIBRONODULAR,
    MESOTHELIOMA,
    NORMALINFLAMED,
    NORMALNOTINFLAMED,
    SYSTOLE,
    DIASTOLE,
    INJUREDPARENCHYMA,
    LUMEN,
    WALL,
    AIRWAYBRANCH,
    VESSELBRANCH,

    };

    enum ImageFeature {
    UNDEFINEDFEATURE,
    CTARTIFACT,
    CTBEAMHARDENING,
    CTSTREAKARTIFACT,
    CTMOTION,
    CTCARDIACMOTION,
    CTBREATHINGMOTION,

    };

    enum ReturnCode {
    EXITSUCCESS,
    HELP,
    EXITFAILURE,
    RESAMPLEFAILURE,
    NRRDREADFAILURE,
    NRRDWRITEFAILURE,
    DICOMREADFAILURE,
    ATLASREADFAILURE,
    LABELMAPWRITEFAILURE,
    LABELMAPREADFAILURE,
    ARGUMENTPARSINGERROR,
    ATLASREGISTRATIONFAILURE,
    QUALITYCONTROLIMAGEWRITEFAILURE,
    INSUFFICIENTDATAFAILURE,
    GENERATEDISTANCEMAPFAILURE,
    SEGMENTATIONFAILURE,

    };

    enum Plane {
    UNDEFINEDPLANE,
    SAGITTAL,
    CORONAL,
    AXIAL,

    };

    typedef std::pair< unsigned char, std::vector<unsigned char> > Region_Pair;


    class ChestConventionsStatic
    {

    public:
        ChestConventionsStatic(){
            BuildStructures();
        }

        std::vector< unsigned char >              ChestRegions;
        std::vector< unsigned char >              ChestTypes;
        std::vector< unsigned char >              ImageFeatures;
        std::vector< unsigned char >              Planes;
        std::vector< std::string >                ChestRegionNames;
        std::vector< std::string >                ChestTypeNames;
        std::vector< std::string >                ImageFeatureNames;
        std::vector< std::string >                PlaneNames;
        std::vector< double* >                    ChestRegionColors;
        std::vector< double* >                    ChestTypeColors;

        /**
         *  The following class will define the hierarchy among the various
         *  regions defined in 'ChestRegion' above.  If a new region is added
         *  to the enumerated list above, the class below should be updated
         *  as well to reflect the update.  'ChestRegionHierarchyMap' contains
         *  a mapping between all regions in the 'ChestRegion' enumerated list
         *  and the region directly above it in the hierarchy.
         */
        std::map< unsigned char, std::vector<unsigned char> >  ChestRegionHierarchyMap;

        std::vector< std::string >  BodyCompositionPhenotypeNames;
        std::vector< std::string >  ParenchymaPhenotypeNames;
        std::vector< std::string >  HistogramPhenotypeNames;
        std::vector< std::string >  PulmonaryVasculaturePhenotypeNames;
        std::vector< std::string >  AirwayPhenotypeNames;
        std::vector< std::string >  BiomechanicalPhenotypeNames;
        std::vector< std::string >  FissurePhenotypeNames;	

    private:
        void BuildStructures() {
            // All the static structures will be automatically generated here
            ChestTypes.push_back( (unsigned char)( UNDEFINEDTYPE ) );
            ChestTypes.push_back( (unsigned char)( NORMALPARENCHYMA ) );
            ChestTypes.push_back( (unsigned char)( AIRWAY ) );
            ChestTypes.push_back( (unsigned char)( VESSEL ) );
            ChestTypes.push_back( (unsigned char)( EMPHYSEMATOUS ) );
            ChestTypes.push_back( (unsigned char)( GROUNDGLASS ) );
            ChestTypes.push_back( (unsigned char)( RETICULAR ) );
            ChestTypes.push_back( (unsigned char)( NODULAR ) );
            ChestTypes.push_back( (unsigned char)( OBLIQUEFISSURE ) );
            ChestTypes.push_back( (unsigned char)( HORIZONTALFISSURE ) );
            ChestTypes.push_back( (unsigned char)( MILDPARASEPTALEMPHYSEMA ) );
            ChestTypes.push_back( (unsigned char)( MODERATEPARASEPTALEMPHYSEMA ) );
            ChestTypes.push_back( (unsigned char)( SEVEREPARASEPTALEMPHYSEMA ) );
            ChestTypes.push_back( (unsigned char)( MILDBULLA ) );
            ChestTypes.push_back( (unsigned char)( MODERATEBULLA ) );
            ChestTypes.push_back( (unsigned char)( SEVEREBULLA ) );
            ChestTypes.push_back( (unsigned char)( MILDCENTRILOBULAREMPHYSEMA ) );
            ChestTypes.push_back( (unsigned char)( MODERATECENTRILOBULAREMPHYSEMA ) );
            ChestTypes.push_back( (unsigned char)( SEVERECENTRILOBULAREMPHYSEMA ) );
            ChestTypes.push_back( (unsigned char)( MILDPANLOBULAREMPHYSEMA ) );
            ChestTypes.push_back( (unsigned char)( MODERATEPANLOBULAREMPHYSEMA ) );
            ChestTypes.push_back( (unsigned char)( SEVEREPANLOBULAREMPHYSEMA ) );
            ChestTypes.push_back( (unsigned char)( AIRWAYWALLTHICKENING ) );
            ChestTypes.push_back( (unsigned char)( AIRWAYCYLINDRICALDILATION ) );
            ChestTypes.push_back( (unsigned char)( VARICOSEBRONCHIECTASIS ) );
            ChestTypes.push_back( (unsigned char)( CYSTICBRONCHIECTASIS ) );
            ChestTypes.push_back( (unsigned char)( CENTRILOBULARNODULE ) );
            ChestTypes.push_back( (unsigned char)( MOSAICING ) );
            ChestTypes.push_back( (unsigned char)( EXPIRATORYMALACIA ) );
            ChestTypes.push_back( (unsigned char)( SABERSHEATH ) );
            ChestTypes.push_back( (unsigned char)( OUTPOUCHING ) );
            ChestTypes.push_back( (unsigned char)( MUCOIDMATERIAL ) );
            ChestTypes.push_back( (unsigned char)( PATCHYGASTRAPPING ) );
            ChestTypes.push_back( (unsigned char)( DIFFUSEGASTRAPPING ) );
            ChestTypes.push_back( (unsigned char)( LINEARSCAR ) );
            ChestTypes.push_back( (unsigned char)( CYST ) );
            ChestTypes.push_back( (unsigned char)( ATELECTASIS ) );
            ChestTypes.push_back( (unsigned char)( HONEYCOMBING ) );
            ChestTypes.push_back( (unsigned char)( TRACHEA ) );
            ChestTypes.push_back( (unsigned char)( MAINBRONCHUS ) );
            ChestTypes.push_back( (unsigned char)( UPPERLOBEBRONCHUS ) );
            ChestTypes.push_back( (unsigned char)( AIRWAYGENERATION3 ) );
            ChestTypes.push_back( (unsigned char)( AIRWAYGENERATION4 ) );
            ChestTypes.push_back( (unsigned char)( AIRWAYGENERATION5 ) );
            ChestTypes.push_back( (unsigned char)( AIRWAYGENERATION6 ) );
            ChestTypes.push_back( (unsigned char)( AIRWAYGENERATION7 ) );
            ChestTypes.push_back( (unsigned char)( AIRWAYGENERATION8 ) );
            ChestTypes.push_back( (unsigned char)( AIRWAYGENERATION9 ) );
            ChestTypes.push_back( (unsigned char)( AIRWAYGENERATION10 ) );
            ChestTypes.push_back( (unsigned char)( CALCIFICATION ) );
            ChestTypes.push_back( (unsigned char)( ARTERY ) );
            ChestTypes.push_back( (unsigned char)( VEIN ) );
            ChestTypes.push_back( (unsigned char)( PECTORALISMINOR ) );
            ChestTypes.push_back( (unsigned char)( PECTORALISMAJOR ) );
            ChestTypes.push_back( (unsigned char)( ANTERIORSCALENE ) );
            ChestTypes.push_back( (unsigned char)( FISSURE ) );
            ChestTypes.push_back( (unsigned char)( VESSELGENERATION0 ) );
            ChestTypes.push_back( (unsigned char)( VESSELGENERATION1 ) );
            ChestTypes.push_back( (unsigned char)( VESSELGENERATION2 ) );
            ChestTypes.push_back( (unsigned char)( VESSELGENERATION3 ) );
            ChestTypes.push_back( (unsigned char)( VESSELGENERATION4 ) );
            ChestTypes.push_back( (unsigned char)( VESSELGENERATION5 ) );
            ChestTypes.push_back( (unsigned char)( VESSELGENERATION6 ) );
            ChestTypes.push_back( (unsigned char)( VESSELGENERATION7 ) );
            ChestTypes.push_back( (unsigned char)( VESSELGENERATION8 ) );
            ChestTypes.push_back( (unsigned char)( VESSELGENERATION9 ) );
            ChestTypes.push_back( (unsigned char)( VESSELGENERATION10 ) );
            ChestTypes.push_back( (unsigned char)( PARASEPTALEMPHYSEMA ) );
            ChestTypes.push_back( (unsigned char)( CENTRILOBULAREMPHYSEMA ) );
            ChestTypes.push_back( (unsigned char)( PANLOBULAREMPHYSEMA ) );
            ChestTypes.push_back( (unsigned char)( SUBCUTANEOUSFAT ) );
            ChestTypes.push_back( (unsigned char)( VISCERALFAT ) );
            ChestTypes.push_back( (unsigned char)( INTERMEDIATEBRONCHUS ) );
            ChestTypes.push_back( (unsigned char)( LOWERLOBEBRONCHUS ) );
            ChestTypes.push_back( (unsigned char)( SUPERIORDIVISIONBRONCHUS ) );
            ChestTypes.push_back( (unsigned char)( LINGULARBRONCHUS ) );
            ChestTypes.push_back( (unsigned char)( MIDDLELOBEBRONCHUS ) );
            ChestTypes.push_back( (unsigned char)( BRONCHIECTATICAIRWAY ) );
            ChestTypes.push_back( (unsigned char)( NONBRONCHIECTATICAIRWAY ) );
            ChestTypes.push_back( (unsigned char)( AMBIGUOUSBRONCHIECTATICAIRWAY ) );
            ChestTypes.push_back( (unsigned char)( MUSCLE ) );
            ChestTypes.push_back( (unsigned char)( HERNIA ) );
            ChestTypes.push_back( (unsigned char)( BONEMARROW ) );
            ChestTypes.push_back( (unsigned char)( BONE ) );
            ChestTypes.push_back( (unsigned char)( INTERSTITIALLUNGDISEASE ) );
            ChestTypes.push_back( (unsigned char)( SUBPLEURALLINE ) );
            ChestTypes.push_back( (unsigned char)( NODULE ) );
            ChestTypes.push_back( (unsigned char)( BENIGNNODULE ) );
            ChestTypes.push_back( (unsigned char)( MALIGNANTNODULE ) );
            ChestTypes.push_back( (unsigned char)( SEPTUM ) );
            ChestTypes.push_back( (unsigned char)( FIBRONODULAR ) );
            ChestTypes.push_back( (unsigned char)( MESOTHELIOMA ) );
            ChestTypes.push_back( (unsigned char)( NORMALINFLAMED ) );
            ChestTypes.push_back( (unsigned char)( NORMALNOTINFLAMED ) );
            ChestTypes.push_back( (unsigned char)( SYSTOLE ) );
            ChestTypes.push_back( (unsigned char)( DIASTOLE ) );
            ChestTypes.push_back( (unsigned char)( INJUREDPARENCHYMA ) );
            ChestTypes.push_back( (unsigned char)( LUMEN ) );
            ChestTypes.push_back( (unsigned char)( WALL ) );
            ChestTypes.push_back( (unsigned char)( AIRWAYBRANCH ) );
            ChestTypes.push_back( (unsigned char)( VESSELBRANCH ) );

            ChestRegions.push_back( (unsigned char)( UNDEFINEDREGION ) );
            ChestRegions.push_back( (unsigned char)( WHOLELUNG ) );
            ChestRegions.push_back( (unsigned char)( RIGHTLUNG ) );
            ChestRegions.push_back( (unsigned char)( LEFTLUNG ) );
            ChestRegions.push_back( (unsigned char)( RIGHTSUPERIORLOBE ) );
            ChestRegions.push_back( (unsigned char)( RIGHTMIDDLELOBE ) );
            ChestRegions.push_back( (unsigned char)( RIGHTINFERIORLOBE ) );
            ChestRegions.push_back( (unsigned char)( LEFTSUPERIORLOBE ) );
            ChestRegions.push_back( (unsigned char)( LEFTINFERIORLOBE ) );
            ChestRegions.push_back( (unsigned char)( LEFTUPPERTHIRD ) );
            ChestRegions.push_back( (unsigned char)( LEFTMIDDLETHIRD ) );
            ChestRegions.push_back( (unsigned char)( LEFTLOWERTHIRD ) );
            ChestRegions.push_back( (unsigned char)( RIGHTUPPERTHIRD ) );
            ChestRegions.push_back( (unsigned char)( RIGHTMIDDLETHIRD ) );
            ChestRegions.push_back( (unsigned char)( RIGHTLOWERTHIRD ) );
            ChestRegions.push_back( (unsigned char)( MEDIASTINUM ) );
            ChestRegions.push_back( (unsigned char)( WHOLEHEART ) );
            ChestRegions.push_back( (unsigned char)( AORTA ) );
            ChestRegions.push_back( (unsigned char)( PULMONARYARTERY ) );
            ChestRegions.push_back( (unsigned char)( PULMONARYVEIN ) );
            ChestRegions.push_back( (unsigned char)( UPPERTHIRD ) );
            ChestRegions.push_back( (unsigned char)( MIDDLETHIRD ) );
            ChestRegions.push_back( (unsigned char)( LOWERTHIRD ) );
            ChestRegions.push_back( (unsigned char)( LEFT ) );
            ChestRegions.push_back( (unsigned char)( RIGHT ) );
            ChestRegions.push_back( (unsigned char)( LIVER ) );
            ChestRegions.push_back( (unsigned char)( SPLEEN ) );
            ChestRegions.push_back( (unsigned char)( ABDOMEN ) );
            ChestRegions.push_back( (unsigned char)( PARAVERTEBRAL ) );
            ChestRegions.push_back( (unsigned char)( OUTSIDELUNG ) );
            ChestRegions.push_back( (unsigned char)( OUTSIDEBODY ) );
            ChestRegions.push_back( (unsigned char)( SKELETON ) );
            ChestRegions.push_back( (unsigned char)( STERNUM ) );
            ChestRegions.push_back( (unsigned char)( HUMERI ) );
            ChestRegions.push_back( (unsigned char)( LEFTHUMERUS ) );
            ChestRegions.push_back( (unsigned char)( RIGHTHUMERUS ) );
            ChestRegions.push_back( (unsigned char)( SCAPULAE ) );
            ChestRegions.push_back( (unsigned char)( LEFTSCAPULA ) );
            ChestRegions.push_back( (unsigned char)( RIGHTSCAPULA ) );
            ChestRegions.push_back( (unsigned char)( HILA ) );
            ChestRegions.push_back( (unsigned char)( LEFTHILUM ) );
            ChestRegions.push_back( (unsigned char)( RIGHTHILUM ) );
            ChestRegions.push_back( (unsigned char)( KIDNEYS ) );
            ChestRegions.push_back( (unsigned char)( LEFTKIDNEY ) );
            ChestRegions.push_back( (unsigned char)( RIGHTKIDNEY ) );
            ChestRegions.push_back( (unsigned char)( ASCENDINGAORTA ) );
            ChestRegions.push_back( (unsigned char)( TRANSVERSALAORTA ) );
            ChestRegions.push_back( (unsigned char)( DESCENDINGAORTA ) );
            ChestRegions.push_back( (unsigned char)( LEFTSUBCLAVIAN ) );
            ChestRegions.push_back( (unsigned char)( RIGHTSUBCLAVIAN ) );
            ChestRegions.push_back( (unsigned char)( LEFTCORONARYARTERY ) );
            ChestRegions.push_back( (unsigned char)( SPINE ) );
            ChestRegions.push_back( (unsigned char)( LEFTVENTRICLE ) );
            ChestRegions.push_back( (unsigned char)( RIGHTVENTRICLE ) );
            ChestRegions.push_back( (unsigned char)( LEFTATRIUM ) );
            ChestRegions.push_back( (unsigned char)( RIGHTATRIUM ) );
            ChestRegions.push_back( (unsigned char)( LEFTPECTORALIS ) );
            ChestRegions.push_back( (unsigned char)( RIGHTPECTORALIS ) );
            ChestRegions.push_back( (unsigned char)( TRACHEA2 ) );
            ChestRegions.push_back( (unsigned char)( LEFTMAINBRONCHUS ) );
            ChestRegions.push_back( (unsigned char)( RIGHTMAINBRONCHUS ) );
            ChestRegions.push_back( (unsigned char)( ESOPHAGUS ) );
            ChestRegions.push_back( (unsigned char)( LEFTCHESTWALL ) );
            ChestRegions.push_back( (unsigned char)( RIGHTCHESTWALL ) );
            ChestRegions.push_back( (unsigned char)( LEFTDIAPHRAGM ) );
            ChestRegions.push_back( (unsigned char)( RIGHTDIAPHRAGM ) );
            ChestRegions.push_back( (unsigned char)( HIATUS ) );
            ChestRegions.push_back( (unsigned char)( PECTORALIS ) );
            ChestRegions.push_back( (unsigned char)( SPINALCORD ) );
            ChestRegions.push_back( (unsigned char)( SUPERIORMESENTERICARTERY ) );
            ChestRegions.push_back( (unsigned char)( PANCREAS ) );
            ChestRegions.push_back( (unsigned char)( PANCREASHEAD ) );
            ChestRegions.push_back( (unsigned char)( LEFTANTERIORCHESTWALL ) );
            ChestRegions.push_back( (unsigned char)( RIGHTANTERIORCHESTWALL ) );
            ChestRegions.push_back( (unsigned char)( LEFTPOSTERIORCHESTWALL ) );
            ChestRegions.push_back( (unsigned char)( RIGHTPOSTERIORCHESTWALL ) );
            ChestRegions.push_back( (unsigned char)( TRACHEACARINA ) );
            ChestRegions.push_back( (unsigned char)( AORTICVALVE ) );
            ChestRegions.push_back( (unsigned char)( VENACAVA ) );

            ImageFeatures.push_back( (unsigned char)( UNDEFINEDFEATURE ) );
            ImageFeatures.push_back( (unsigned char)( CTARTIFACT ) );
            ImageFeatures.push_back( (unsigned char)( CTBEAMHARDENING ) );
            ImageFeatures.push_back( (unsigned char)( CTSTREAKARTIFACT ) );
            ImageFeatures.push_back( (unsigned char)( CTMOTION ) );
            ImageFeatures.push_back( (unsigned char)( CTCARDIACMOTION ) );
            ImageFeatures.push_back( (unsigned char)( CTBREATHINGMOTION ) );

            Planes.push_back( (unsigned char)( UNDEFINEDPLANE ) );
            Planes.push_back( (unsigned char)( SAGITTAL ) );
            Planes.push_back( (unsigned char)( CORONAL ) );
            Planes.push_back( (unsigned char)( AXIAL ) );


            ChestTypeNames.push_back( "UndefinedType" );
            ChestTypeNames.push_back( "NormalParenchyma" );
            ChestTypeNames.push_back( "Airway" );
            ChestTypeNames.push_back( "Vessel" );
            ChestTypeNames.push_back( "Emphysematous" );
            ChestTypeNames.push_back( "GroundGlass" );
            ChestTypeNames.push_back( "Reticular" );
            ChestTypeNames.push_back( "Nodular" );
            ChestTypeNames.push_back( "ObliqueFissure" );
            ChestTypeNames.push_back( "HorizontalFissure" );
            ChestTypeNames.push_back( "MildParaseptalEmphysema" );
            ChestTypeNames.push_back( "ModerateParaseptalEmphysema" );
            ChestTypeNames.push_back( "SevereParaseptalEmphysema" );
            ChestTypeNames.push_back( "MildBulla" );
            ChestTypeNames.push_back( "ModerateBulla" );
            ChestTypeNames.push_back( "SevereBulla" );
            ChestTypeNames.push_back( "MildCentrilobularEmphysema" );
            ChestTypeNames.push_back( "ModerateCentrilobularEmphysema" );
            ChestTypeNames.push_back( "SevereCentrilobularEmphysema" );
            ChestTypeNames.push_back( "MildPanlobularEmphysema" );
            ChestTypeNames.push_back( "ModeratePanlobularEmphysema" );
            ChestTypeNames.push_back( "SeverePanlobularEmphysema" );
            ChestTypeNames.push_back( "AirwayWallThickening" );
            ChestTypeNames.push_back( "AirwayCylindricalDilation" );
            ChestTypeNames.push_back( "VaricoseBronchiectasis" );
            ChestTypeNames.push_back( "CysticBronchiectasis" );
            ChestTypeNames.push_back( "CentrilobularNodule" );
            ChestTypeNames.push_back( "Mosaicing" );
            ChestTypeNames.push_back( "ExpiratoryMalacia" );
            ChestTypeNames.push_back( "SaberSheath" );
            ChestTypeNames.push_back( "OutPouching" );
            ChestTypeNames.push_back( "MucoidMaterial" );
            ChestTypeNames.push_back( "PatchyGasTrapping" );
            ChestTypeNames.push_back( "DiffuseGasTrapping" );
            ChestTypeNames.push_back( "LinearScar" );
            ChestTypeNames.push_back( "Cyst" );
            ChestTypeNames.push_back( "Atelectasis" );
            ChestTypeNames.push_back( "Honeycombing" );
            ChestTypeNames.push_back( "Trachea" );
            ChestTypeNames.push_back( "MainBronchus" );
            ChestTypeNames.push_back( "UpperLobeBronchus" );
            ChestTypeNames.push_back( "AirwayGeneration3" );
            ChestTypeNames.push_back( "AirwayGeneration4" );
            ChestTypeNames.push_back( "AirwayGeneration5" );
            ChestTypeNames.push_back( "AirwayGeneration6" );
            ChestTypeNames.push_back( "AirwayGeneration7" );
            ChestTypeNames.push_back( "AirwayGeneration8" );
            ChestTypeNames.push_back( "AirwayGeneration9" );
            ChestTypeNames.push_back( "AirwayGeneration10" );
            ChestTypeNames.push_back( "Calcification" );
            ChestTypeNames.push_back( "Artery" );
            ChestTypeNames.push_back( "Vein" );
            ChestTypeNames.push_back( "PectoralisMinor" );
            ChestTypeNames.push_back( "PectoralisMajor" );
            ChestTypeNames.push_back( "AnteriorScalene" );
            ChestTypeNames.push_back( "Fissure" );
            ChestTypeNames.push_back( "VesselGeneration0" );
            ChestTypeNames.push_back( "VesselGeneration1" );
            ChestTypeNames.push_back( "VesselGeneration2" );
            ChestTypeNames.push_back( "VesselGeneration3" );
            ChestTypeNames.push_back( "VesselGeneration4" );
            ChestTypeNames.push_back( "VesselGeneration5" );
            ChestTypeNames.push_back( "VesselGeneration6" );
            ChestTypeNames.push_back( "VesselGeneration7" );
            ChestTypeNames.push_back( "VesselGeneration8" );
            ChestTypeNames.push_back( "VesselGeneration9" );
            ChestTypeNames.push_back( "VesselGeneration10" );
            ChestTypeNames.push_back( "ParaseptalEmphysema" );
            ChestTypeNames.push_back( "CentrilobularEmphysema" );
            ChestTypeNames.push_back( "PanlobularEmphysema" );
            ChestTypeNames.push_back( "SubcutaneousFat" );
            ChestTypeNames.push_back( "VisceralFat" );
            ChestTypeNames.push_back( "IntermediateBronchus" );
            ChestTypeNames.push_back( "LowerLobeBronchus" );
            ChestTypeNames.push_back( "SuperiorDivisionBronchus" );
            ChestTypeNames.push_back( "LingularBronchus" );
            ChestTypeNames.push_back( "MiddleLobeBronchus" );
            ChestTypeNames.push_back( "BronchiectaticAirway" );
            ChestTypeNames.push_back( "NonBronchiectaticAirway" );
            ChestTypeNames.push_back( "AmbiguousBronchiectaticAirway" );
            ChestTypeNames.push_back( "Muscle" );
            ChestTypeNames.push_back( "Hernia" );
            ChestTypeNames.push_back( "BoneMarrow" );
            ChestTypeNames.push_back( "Bone" );
            ChestTypeNames.push_back( "InterstitialLungDisease" );
            ChestTypeNames.push_back( "SubpleuralLine" );
            ChestTypeNames.push_back( "Nodule" );
            ChestTypeNames.push_back( "BenignNodule" );
            ChestTypeNames.push_back( "MalignantNodule" );
            ChestTypeNames.push_back( "Septum" );
            ChestTypeNames.push_back( "Fibronodular" );
            ChestTypeNames.push_back( "Mesothelioma" );
            ChestTypeNames.push_back( "NormalInflamed" );
            ChestTypeNames.push_back( "NormalNotInflamed" );
            ChestTypeNames.push_back( "Systole" );
            ChestTypeNames.push_back( "Diastole" );
            ChestTypeNames.push_back( "InjuredParenchyma" );
            ChestTypeNames.push_back( "Lumen" );
            ChestTypeNames.push_back( "Wall" );
            ChestTypeNames.push_back( "AirwayBranch" );
            ChestTypeNames.push_back( "VesselBranch" );

            ChestRegionNames.push_back( "UndefinedRegion" );
            ChestRegionNames.push_back( "WholeLung" );
            ChestRegionNames.push_back( "RightLung" );
            ChestRegionNames.push_back( "LeftLung" );
            ChestRegionNames.push_back( "RightSuperiorLobe" );
            ChestRegionNames.push_back( "RightMiddleLobe" );
            ChestRegionNames.push_back( "RightInferiorLobe" );
            ChestRegionNames.push_back( "LeftSuperiorLobe" );
            ChestRegionNames.push_back( "LeftInferiorLobe" );
            ChestRegionNames.push_back( "LeftUpperThird" );
            ChestRegionNames.push_back( "LeftMiddleThird" );
            ChestRegionNames.push_back( "LeftLowerThird" );
            ChestRegionNames.push_back( "RightUpperThird" );
            ChestRegionNames.push_back( "RightMiddleThird" );
            ChestRegionNames.push_back( "RightLowerThird" );
            ChestRegionNames.push_back( "Mediastinum" );
            ChestRegionNames.push_back( "WholeHeart" );
            ChestRegionNames.push_back( "Aorta" );
            ChestRegionNames.push_back( "PulmonaryArtery" );
            ChestRegionNames.push_back( "PulmonaryVein" );
            ChestRegionNames.push_back( "UpperThird" );
            ChestRegionNames.push_back( "MiddleThird" );
            ChestRegionNames.push_back( "LowerThird" );
            ChestRegionNames.push_back( "Left" );
            ChestRegionNames.push_back( "Right" );
            ChestRegionNames.push_back( "Liver" );
            ChestRegionNames.push_back( "Spleen" );
            ChestRegionNames.push_back( "Abdomen" );
            ChestRegionNames.push_back( "Paravertebral" );
            ChestRegionNames.push_back( "OutsideLung" );
            ChestRegionNames.push_back( "OutsideBody" );
            ChestRegionNames.push_back( "Skeleton" );
            ChestRegionNames.push_back( "Sternum" );
            ChestRegionNames.push_back( "Humeri" );
            ChestRegionNames.push_back( "LeftHumerus" );
            ChestRegionNames.push_back( "RightHumerus" );
            ChestRegionNames.push_back( "Scapulae" );
            ChestRegionNames.push_back( "LeftScapula" );
            ChestRegionNames.push_back( "RightScapula" );
            ChestRegionNames.push_back( "Hila" );
            ChestRegionNames.push_back( "LeftHilum" );
            ChestRegionNames.push_back( "RightHilum" );
            ChestRegionNames.push_back( "Kidneys" );
            ChestRegionNames.push_back( "LeftKidney" );
            ChestRegionNames.push_back( "RightKidney" );
            ChestRegionNames.push_back( "AscendingAorta" );
            ChestRegionNames.push_back( "TransversalAorta" );
            ChestRegionNames.push_back( "DescendingAorta" );
            ChestRegionNames.push_back( "LeftSubclavian" );
            ChestRegionNames.push_back( "RightSubclavian" );
            ChestRegionNames.push_back( "LeftCoronaryArtery" );
            ChestRegionNames.push_back( "Spine" );
            ChestRegionNames.push_back( "LeftVentricle" );
            ChestRegionNames.push_back( "RightVentricle" );
            ChestRegionNames.push_back( "LeftAtrium" );
            ChestRegionNames.push_back( "RightAtrium" );
            ChestRegionNames.push_back( "LeftPectoralis" );
            ChestRegionNames.push_back( "RightPectoralis" );
            ChestRegionNames.push_back( "Trachea2" );
            ChestRegionNames.push_back( "LeftMainBronchus" );
            ChestRegionNames.push_back( "RightMainBronchus" );
            ChestRegionNames.push_back( "Esophagus" );
            ChestRegionNames.push_back( "LeftChestWall" );
            ChestRegionNames.push_back( "RightChestWall" );
            ChestRegionNames.push_back( "LeftDiaphragm" );
            ChestRegionNames.push_back( "RightDiaphragm" );
            ChestRegionNames.push_back( "Hiatus" );
            ChestRegionNames.push_back( "Pectoralis" );
            ChestRegionNames.push_back( "SpinalCord" );
            ChestRegionNames.push_back( "SuperiorMesentericArtery" );
            ChestRegionNames.push_back( "Pancreas" );
            ChestRegionNames.push_back( "PancreasHead" );
            ChestRegionNames.push_back( "LeftAnteriorChestWall" );
            ChestRegionNames.push_back( "RightAnteriorChestWall" );
            ChestRegionNames.push_back( "LeftPosteriorChestWall" );
            ChestRegionNames.push_back( "RightPosteriorChestWall" );
            ChestRegionNames.push_back( "TracheaCarina" );
            ChestRegionNames.push_back( "AorticValve" );
            ChestRegionNames.push_back( "VenaCava" );

            ImageFeatureNames.push_back( "UndefinedFeature" );
            ImageFeatureNames.push_back( "CTArtifact" );
            ImageFeatureNames.push_back( "CTBeamHardening" );
            ImageFeatureNames.push_back( "CTStreakArtifact" );
            ImageFeatureNames.push_back( "CTMotion" );
            ImageFeatureNames.push_back( "CTCardiacMotion" );
            ImageFeatureNames.push_back( "CTBreathingMotion" );

            PlaneNames.push_back( "UndefinedPlane" );
            PlaneNames.push_back( "Sagittal" );
            PlaneNames.push_back( "Coronal" );
            PlaneNames.push_back( "Axial" );


            BodyCompositionPhenotypeNames.push_back( "AxialCSA" );
            BodyCompositionPhenotypeNames.push_back( "CoronalCSA" );
            BodyCompositionPhenotypeNames.push_back( "SagittalCSA" );
            BodyCompositionPhenotypeNames.push_back( "HUMean" );
            BodyCompositionPhenotypeNames.push_back( "HUStd" );
            BodyCompositionPhenotypeNames.push_back( "HUKurtosis" );
            BodyCompositionPhenotypeNames.push_back( "HUSkewness" );
            BodyCompositionPhenotypeNames.push_back( "HUMode" );
            BodyCompositionPhenotypeNames.push_back( "HUMedian" );
            BodyCompositionPhenotypeNames.push_back( "HUMin" );
            BodyCompositionPhenotypeNames.push_back( "HUMax" );
            BodyCompositionPhenotypeNames.push_back( "leanAxialCSA" );
            BodyCompositionPhenotypeNames.push_back( "leanCoronalCSA" );
            BodyCompositionPhenotypeNames.push_back( "leanSagittalCSA" );
            BodyCompositionPhenotypeNames.push_back( "leanHUMean" );
            BodyCompositionPhenotypeNames.push_back( "leanHUStd" );
            BodyCompositionPhenotypeNames.push_back( "leanHUKurtosis" );
            BodyCompositionPhenotypeNames.push_back( "leanHUSkewness" );
            BodyCompositionPhenotypeNames.push_back( "leanHUMode" );
            BodyCompositionPhenotypeNames.push_back( "leanHUMedian" );
            BodyCompositionPhenotypeNames.push_back( "leanHUMin" );
            BodyCompositionPhenotypeNames.push_back( "leanHUMax" );

            ParenchymaPhenotypeNames.push_back( "LAA950" );
            ParenchymaPhenotypeNames.push_back( "LAA925" );
            ParenchymaPhenotypeNames.push_back( "LAA910" );
            ParenchymaPhenotypeNames.push_back( "LAA905" );
            ParenchymaPhenotypeNames.push_back( "LAA900" );
            ParenchymaPhenotypeNames.push_back( "LAA875" );
            ParenchymaPhenotypeNames.push_back( "LAA856" );
            ParenchymaPhenotypeNames.push_back( "HAA700" );
            ParenchymaPhenotypeNames.push_back( "HAA600" );
            ParenchymaPhenotypeNames.push_back( "HAA500" );
            ParenchymaPhenotypeNames.push_back( "HAA250" );
            ParenchymaPhenotypeNames.push_back( "Perc10" );
            ParenchymaPhenotypeNames.push_back( "Perc15" );
            ParenchymaPhenotypeNames.push_back( "HUMean" );
            ParenchymaPhenotypeNames.push_back( "HUStd" );
            ParenchymaPhenotypeNames.push_back( "HUKurtosis" );
            ParenchymaPhenotypeNames.push_back( "HUSkewness" );
            ParenchymaPhenotypeNames.push_back( "HUMode" );
            ParenchymaPhenotypeNames.push_back( "HUMedian" );
            ParenchymaPhenotypeNames.push_back( "HUMin" );
            ParenchymaPhenotypeNames.push_back( "HUMax" );
            ParenchymaPhenotypeNames.push_back( "HUMean950" );
            ParenchymaPhenotypeNames.push_back( "HUStd950" );
            ParenchymaPhenotypeNames.push_back( "HUKurtosis950" );
            ParenchymaPhenotypeNames.push_back( "HUSkewness950" );
            ParenchymaPhenotypeNames.push_back( "HUMode950" );
            ParenchymaPhenotypeNames.push_back( "HUMedian950" );
            ParenchymaPhenotypeNames.push_back( "HUMin950" );
            ParenchymaPhenotypeNames.push_back( "HUMax950" );
            ParenchymaPhenotypeNames.push_back( "HUMean500" );
            ParenchymaPhenotypeNames.push_back( "HUStd500" );
            ParenchymaPhenotypeNames.push_back( "HUKurtosis500" );
            ParenchymaPhenotypeNames.push_back( "HUSkewness500" );
            ParenchymaPhenotypeNames.push_back( "HUMode500" );
            ParenchymaPhenotypeNames.push_back( "HUMedian500" );
            ParenchymaPhenotypeNames.push_back( "HUMin500" );
            ParenchymaPhenotypeNames.push_back( "HUMax500" );
            ParenchymaPhenotypeNames.push_back( "Volume" );
            ParenchymaPhenotypeNames.push_back( "Mass" );
            ParenchymaPhenotypeNames.push_back( "TypeFrac" );

            PulmonaryVasculaturePhenotypeNames.push_back( "BV5" );
            PulmonaryVasculaturePhenotypeNames.push_back( "BV5_10" );
            PulmonaryVasculaturePhenotypeNames.push_back( "BV10_15" );
            PulmonaryVasculaturePhenotypeNames.push_back( "BV15_20" );
            PulmonaryVasculaturePhenotypeNames.push_back( "BV20_25" );
            PulmonaryVasculaturePhenotypeNames.push_back( "BV25_30" );
            PulmonaryVasculaturePhenotypeNames.push_back( "BV30_35" );
            PulmonaryVasculaturePhenotypeNames.push_back( "BV35_40" );
            PulmonaryVasculaturePhenotypeNames.push_back( "BV40_45" );
            PulmonaryVasculaturePhenotypeNames.push_back( "BV45_50" );
            PulmonaryVasculaturePhenotypeNames.push_back( "BV50_55" );
            PulmonaryVasculaturePhenotypeNames.push_back( "BV55_60" );
            PulmonaryVasculaturePhenotypeNames.push_back( "BV60_65" );
            PulmonaryVasculaturePhenotypeNames.push_back( "BV70_75" );
            PulmonaryVasculaturePhenotypeNames.push_back( "BV75_80" );
            PulmonaryVasculaturePhenotypeNames.push_back( "BV80_85" );
            PulmonaryVasculaturePhenotypeNames.push_back( "BV85_90" );
            PulmonaryVasculaturePhenotypeNames.push_back( "TBV" );


         // For the hierarchical relationships, leftness and rightness
            // are respected before any relationship that transcends
            // leftness or rightness. For example left lower third maps to
            // left lung, not lower third, etc. The exception to this rule
            // is that both left and right lungs are subordinate to
            // WHOLELUNG, not LEFT and RIGHT
            std::vector<unsigned char> tmp_0;
            tmp_0.push_back((unsigned char)LEFTLUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTSUPERIORLOBE), tmp_0));
            std::vector<unsigned char> tmp_1;
            tmp_1.push_back((unsigned char)LEFTLUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTINFERIORLOBE), tmp_1));
            std::vector<unsigned char> tmp_2;
            tmp_2.push_back((unsigned char)RIGHTLUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTSUPERIORLOBE), tmp_2));
            std::vector<unsigned char> tmp_3;
            tmp_3.push_back((unsigned char)RIGHTLUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTMIDDLELOBE), tmp_3));
            std::vector<unsigned char> tmp_4;
            tmp_4.push_back((unsigned char)RIGHTLUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTINFERIORLOBE), tmp_4));
            std::vector<unsigned char> tmp_5;
            tmp_5.push_back((unsigned char)WHOLELUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTLUNG), tmp_5));
            std::vector<unsigned char> tmp_6;
            tmp_6.push_back((unsigned char)WHOLELUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTLUNG), tmp_6));
            std::vector<unsigned char> tmp_7;
            tmp_7.push_back((unsigned char)LEFTLUNG);
            tmp_7.push_back((unsigned char)UPPERTHIRD);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTUPPERTHIRD), tmp_7));
            std::vector<unsigned char> tmp_8;
            tmp_8.push_back((unsigned char)LEFTLUNG);
            tmp_8.push_back((unsigned char)MIDDLETHIRD);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTMIDDLETHIRD), tmp_8));
            std::vector<unsigned char> tmp_9;
            tmp_9.push_back((unsigned char)LEFTLUNG);
            tmp_9.push_back((unsigned char)LOWERTHIRD);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTLOWERTHIRD), tmp_9));
            std::vector<unsigned char> tmp_10;
            tmp_10.push_back((unsigned char)RIGHTLUNG);
            tmp_10.push_back((unsigned char)UPPERTHIRD);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTUPPERTHIRD), tmp_10));
            std::vector<unsigned char> tmp_11;
            tmp_11.push_back((unsigned char)RIGHTLUNG);
            tmp_11.push_back((unsigned char)MIDDLETHIRD);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTMIDDLETHIRD), tmp_11));
            std::vector<unsigned char> tmp_12;
            tmp_12.push_back((unsigned char)RIGHTLUNG);
            tmp_12.push_back((unsigned char)LOWERTHIRD);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTLOWERTHIRD), tmp_12));
            std::vector<unsigned char> tmp_13;
            tmp_13.push_back((unsigned char)MEDIASTINUM);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(WHOLEHEART), tmp_13));
            std::vector<unsigned char> tmp_14;
            tmp_14.push_back((unsigned char)MEDIASTINUM);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(AORTA), tmp_14));
            std::vector<unsigned char> tmp_15;
            tmp_15.push_back((unsigned char)MEDIASTINUM);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(VENACAVA), tmp_15));
            std::vector<unsigned char> tmp_16;
            tmp_16.push_back((unsigned char)MEDIASTINUM);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(PULMONARYARTERY), tmp_16));
            std::vector<unsigned char> tmp_17;
            tmp_17.push_back((unsigned char)WHOLELUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LOWERTHIRD), tmp_17));
            std::vector<unsigned char> tmp_18;
            tmp_18.push_back((unsigned char)WHOLELUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(MIDDLETHIRD), tmp_18));
            std::vector<unsigned char> tmp_19;
            tmp_19.push_back((unsigned char)WHOLELUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(UPPERTHIRD), tmp_19));
            std::vector<unsigned char> tmp_20;
            tmp_20.push_back((unsigned char)OUTSIDELUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(MEDIASTINUM), tmp_20));
            std::vector<unsigned char> tmp_21;
            tmp_21.push_back((unsigned char)OUTSIDELUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(WHOLEHEART), tmp_21));
            std::vector<unsigned char> tmp_22;
            tmp_22.push_back((unsigned char)OUTSIDELUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(AORTA), tmp_22));
            std::vector<unsigned char> tmp_23;
            tmp_23.push_back((unsigned char)OUTSIDELUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LIVER), tmp_23));
            std::vector<unsigned char> tmp_24;
            tmp_24.push_back((unsigned char)OUTSIDELUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(SPLEEN), tmp_24));
            std::vector<unsigned char> tmp_25;
            tmp_25.push_back((unsigned char)OUTSIDELUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(ABDOMEN), tmp_25));
            std::vector<unsigned char> tmp_26;
            tmp_26.push_back((unsigned char)OUTSIDELUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(PARAVERTEBRAL), tmp_26));
            std::vector<unsigned char> tmp_27;
            tmp_27.push_back((unsigned char)OUTSIDELUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(SKELETON), tmp_27));
            std::vector<unsigned char> tmp_28;
            tmp_28.push_back((unsigned char)SKELETON);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(STERNUM), tmp_28));
            std::vector<unsigned char> tmp_29;
            tmp_29.push_back((unsigned char)SKELETON);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(HUMERI), tmp_29));
            std::vector<unsigned char> tmp_30;
            tmp_30.push_back((unsigned char)HUMERI);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTHUMERUS), tmp_30));
            std::vector<unsigned char> tmp_31;
            tmp_31.push_back((unsigned char)HUMERI);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTHUMERUS), tmp_31));
            std::vector<unsigned char> tmp_32;
            tmp_32.push_back((unsigned char)LEFT);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTHUMERUS), tmp_32));
            std::vector<unsigned char> tmp_33;
            tmp_33.push_back((unsigned char)RIGHT);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTHUMERUS), tmp_33));
            std::vector<unsigned char> tmp_34;
            tmp_34.push_back((unsigned char)SKELETON);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(SCAPULAE), tmp_34));
            std::vector<unsigned char> tmp_35;
            tmp_35.push_back((unsigned char)SCAPULAE);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTSCAPULA), tmp_35));
            std::vector<unsigned char> tmp_36;
            tmp_36.push_back((unsigned char)SCAPULAE);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTSCAPULA), tmp_36));
            std::vector<unsigned char> tmp_37;
            tmp_37.push_back((unsigned char)LEFT);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTSCAPULA), tmp_37));
            std::vector<unsigned char> tmp_38;
            tmp_38.push_back((unsigned char)RIGHT);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTSCAPULA), tmp_38));
            std::vector<unsigned char> tmp_39;
            tmp_39.push_back((unsigned char)MEDIASTINUM);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(HILA), tmp_39));
            std::vector<unsigned char> tmp_40;
            tmp_40.push_back((unsigned char)HILA);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTHILUM), tmp_40));
            std::vector<unsigned char> tmp_41;
            tmp_41.push_back((unsigned char)HILA);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTHILUM), tmp_41));
            std::vector<unsigned char> tmp_42;
            tmp_42.push_back((unsigned char)LEFT);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTHILUM), tmp_42));
            std::vector<unsigned char> tmp_43;
            tmp_43.push_back((unsigned char)RIGHT);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTHILUM), tmp_43));
            std::vector<unsigned char> tmp_44;
            tmp_44.push_back((unsigned char)OUTSIDELUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(KIDNEYS), tmp_44));
            std::vector<unsigned char> tmp_45;
            tmp_45.push_back((unsigned char)KIDNEYS);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTKIDNEY), tmp_45));
            std::vector<unsigned char> tmp_46;
            tmp_46.push_back((unsigned char)KIDNEYS);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTKIDNEY), tmp_46));
            std::vector<unsigned char> tmp_47;
            tmp_47.push_back((unsigned char)LEFT);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTKIDNEY), tmp_47));
            std::vector<unsigned char> tmp_48;
            tmp_48.push_back((unsigned char)RIGHT);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTKIDNEY), tmp_48));
            std::vector<unsigned char> tmp_49;
            tmp_49.push_back((unsigned char)AORTA);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(ASCENDINGAORTA), tmp_49));
            std::vector<unsigned char> tmp_50;
            tmp_50.push_back((unsigned char)AORTA);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(TRANSVERSALAORTA), tmp_50));
            std::vector<unsigned char> tmp_51;
            tmp_51.push_back((unsigned char)AORTA);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(DESCENDINGAORTA), tmp_51));
            std::vector<unsigned char> tmp_52;
            tmp_52.push_back((unsigned char)TRANSVERSALAORTA);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTSUBCLAVIAN), tmp_52));
            std::vector<unsigned char> tmp_53;
            tmp_53.push_back((unsigned char)TRANSVERSALAORTA);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTSUBCLAVIAN), tmp_53));
            std::vector<unsigned char> tmp_54;
            tmp_54.push_back((unsigned char)LEFT);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTSUBCLAVIAN), tmp_54));
            std::vector<unsigned char> tmp_55;
            tmp_55.push_back((unsigned char)RIGHT);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTSUBCLAVIAN), tmp_55));
            std::vector<unsigned char> tmp_56;
            tmp_56.push_back((unsigned char)ASCENDINGAORTA);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTCORONARYARTERY), tmp_56));
            std::vector<unsigned char> tmp_57;
            tmp_57.push_back((unsigned char)LEFT);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTCORONARYARTERY), tmp_57));
            std::vector<unsigned char> tmp_58;
            tmp_58.push_back((unsigned char)SKELETON);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(SPINE), tmp_58));
            std::vector<unsigned char> tmp_59;
            tmp_59.push_back((unsigned char)WHOLEHEART);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTVENTRICLE), tmp_59));
            std::vector<unsigned char> tmp_60;
            tmp_60.push_back((unsigned char)WHOLEHEART);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTVENTRICLE), tmp_60));
            std::vector<unsigned char> tmp_61;
            tmp_61.push_back((unsigned char)WHOLEHEART);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTVENTRICLE), tmp_61));
            std::vector<unsigned char> tmp_62;
            tmp_62.push_back((unsigned char)WHOLEHEART);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTATRIUM), tmp_62));
            std::vector<unsigned char> tmp_63;
            tmp_63.push_back((unsigned char)WHOLEHEART);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTATRIUM), tmp_63));
            std::vector<unsigned char> tmp_64;
            tmp_64.push_back((unsigned char)WHOLEHEART);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTATRIUM), tmp_64));
            std::vector<unsigned char> tmp_65;
            tmp_65.push_back((unsigned char)PECTORALIS);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTPECTORALIS), tmp_65));
            std::vector<unsigned char> tmp_66;
            tmp_66.push_back((unsigned char)PECTORALIS);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTPECTORALIS), tmp_66));
            std::vector<unsigned char> tmp_67;
            tmp_67.push_back((unsigned char)MEDIASTINUM);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(TRACHEA2), tmp_67));
            std::vector<unsigned char> tmp_68;
            tmp_68.push_back((unsigned char)MEDIASTINUM);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTMAINBRONCHUS), tmp_68));
            std::vector<unsigned char> tmp_69;
            tmp_69.push_back((unsigned char)MEDIASTINUM);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTMAINBRONCHUS), tmp_69));
            std::vector<unsigned char> tmp_70;
            tmp_70.push_back((unsigned char)MEDIASTINUM);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(ESOPHAGUS), tmp_70));
            std::vector<unsigned char> tmp_71;
            tmp_71.push_back((unsigned char)OUTSIDELUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTCHESTWALL), tmp_71));
            std::vector<unsigned char> tmp_72;
            tmp_72.push_back((unsigned char)OUTSIDELUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTCHESTWALL), tmp_72));
            std::vector<unsigned char> tmp_73;
            tmp_73.push_back((unsigned char)RIGHTCHESTWALL);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTANTERIORCHESTWALL), tmp_73));
            std::vector<unsigned char> tmp_74;
            tmp_74.push_back((unsigned char)RIGHTCHESTWALL);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTPOSTERIORCHESTWALL), tmp_74));
            std::vector<unsigned char> tmp_75;
            tmp_75.push_back((unsigned char)LEFTCHESTWALL);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTANTERIORCHESTWALL), tmp_75));
            std::vector<unsigned char> tmp_76;
            tmp_76.push_back((unsigned char)LEFTCHESTWALL);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTPOSTERIORCHESTWALL), tmp_76));
            std::vector<unsigned char> tmp_77;
            tmp_77.push_back((unsigned char)OUTSIDELUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(LEFTDIAPHRAGM), tmp_77));
            std::vector<unsigned char> tmp_78;
            tmp_78.push_back((unsigned char)OUTSIDELUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(RIGHTDIAPHRAGM), tmp_78));
            std::vector<unsigned char> tmp_79;
            tmp_79.push_back((unsigned char)OUTSIDELUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(HIATUS), tmp_79));
            std::vector<unsigned char> tmp_80;
            tmp_80.push_back((unsigned char)OUTSIDELUNG);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(PECTORALIS), tmp_80));
            std::vector<unsigned char> tmp_81;
            tmp_81.push_back((unsigned char)SPINE);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(SPINALCORD), tmp_81));
            std::vector<unsigned char> tmp_82;
            tmp_82.push_back((unsigned char)PANCREAS);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(PANCREASHEAD), tmp_82));
            std::vector<unsigned char> tmp_83;
            tmp_83.push_back((unsigned char)TRACHEA2);
            ChestRegionHierarchyMap.insert(Region_Pair((unsigned char)(TRACHEACARINA), tmp_83));

            double* t000 = new double[3]; t000[0] = 1.00; t000[1] = 1.00; t000[2] = 1.00; ChestTypeColors.push_back( t000 );
            double* t001 = new double[3]; t001[0] = 0.99; t001[1] = 0.99; t001[2] = 0.99; ChestTypeColors.push_back( t001 );
            double* t002 = new double[3]; t002[0] = 0.98; t002[1] = 0.98; t002[2] = 0.98; ChestTypeColors.push_back( t002 );
            double* t003 = new double[3]; t003[0] = 0.97; t003[1] = 0.97; t003[2] = 0.97; ChestTypeColors.push_back( t003 );
            double* t004 = new double[3]; t004[0] = 0.96; t004[1] = 0.96; t004[2] = 0.96; ChestTypeColors.push_back( t004 );
            double* t005 = new double[3]; t005[0] = 0.95; t005[1] = 0.95; t005[2] = 0.95; ChestTypeColors.push_back( t005 );
            double* t006 = new double[3]; t006[0] = 0.94; t006[1] = 0.94; t006[2] = 0.94; ChestTypeColors.push_back( t006 );
            double* t007 = new double[3]; t007[0] = 0.93; t007[1] = 0.93; t007[2] = 0.93; ChestTypeColors.push_back( t007 );
            double* t008 = new double[3]; t008[0] = 0.12; t008[1] = 0.92; t008[2] = 0.02; ChestTypeColors.push_back( t008 );
            double* t009 = new double[3]; t009[0] = 0.01; t009[1] = 0.01; t009[2] = 0.94; ChestTypeColors.push_back( t009 );
            double* t010 = new double[3]; t010[0] = 0.90; t010[1] = 0.90; t010[2] = 0.90; ChestTypeColors.push_back( t010 );
            double* t011 = new double[3]; t011[0] = 0.89; t011[1] = 0.89; t011[2] = 0.89; ChestTypeColors.push_back( t011 );
            double* t012 = new double[3]; t012[0] = 0.88; t012[1] = 0.88; t012[2] = 0.88; ChestTypeColors.push_back( t012 );
            double* t013 = new double[3]; t013[0] = 0.87; t013[1] = 0.87; t013[2] = 0.87; ChestTypeColors.push_back( t013 );
            double* t014 = new double[3]; t014[0] = 0.86; t014[1] = 0.86; t014[2] = 0.86; ChestTypeColors.push_back( t014 );
            double* t015 = new double[3]; t015[0] = 0.85; t015[1] = 0.85; t015[2] = 0.85; ChestTypeColors.push_back( t015 );
            double* t016 = new double[3]; t016[0] = 0.84; t016[1] = 0.84; t016[2] = 0.84; ChestTypeColors.push_back( t016 );
            double* t017 = new double[3]; t017[0] = 0.83; t017[1] = 0.83; t017[2] = 0.83; ChestTypeColors.push_back( t017 );
            double* t018 = new double[3]; t018[0] = 0.82; t018[1] = 0.82; t018[2] = 0.82; ChestTypeColors.push_back( t018 );
            double* t019 = new double[3]; t019[0] = 0.81; t019[1] = 0.81; t019[2] = 0.81; ChestTypeColors.push_back( t019 );
            double* t020 = new double[3]; t020[0] = 0.80; t020[1] = 0.70; t020[2] = 0.80; ChestTypeColors.push_back( t020 );
            double* t021 = new double[3]; t021[0] = 0.79; t021[1] = 0.79; t021[2] = 0.79; ChestTypeColors.push_back( t021 );
            double* t022 = new double[3]; t022[0] = 0.78; t022[1] = 0.78; t022[2] = 0.78; ChestTypeColors.push_back( t022 );
            double* t023 = new double[3]; t023[0] = 0.77; t023[1] = 0.77; t023[2] = 0.77; ChestTypeColors.push_back( t023 );
            double* t024 = new double[3]; t024[0] = 0.76; t024[1] = 0.76; t024[2] = 0.76; ChestTypeColors.push_back( t024 );
            double* t025 = new double[3]; t025[0] = 0.75; t025[1] = 0.75; t025[2] = 0.75; ChestTypeColors.push_back( t025 );
            double* t026 = new double[3]; t026[0] = 0.74; t026[1] = 0.74; t026[2] = 0.74; ChestTypeColors.push_back( t026 );
            double* t027 = new double[3]; t027[0] = 0.73; t027[1] = 0.73; t027[2] = 0.73; ChestTypeColors.push_back( t027 );
            double* t028 = new double[3]; t028[0] = 0.72; t028[1] = 0.72; t028[2] = 0.72; ChestTypeColors.push_back( t028 );
            double* t029 = new double[3]; t029[0] = 0.71; t029[1] = 0.71; t029[2] = 0.71; ChestTypeColors.push_back( t029 );
            double* t030 = new double[3]; t030[0] = 0.70; t030[1] = 0.70; t030[2] = 0.70; ChestTypeColors.push_back( t030 );
            double* t031 = new double[3]; t031[0] = 0.69; t031[1] = 0.69; t031[2] = 0.69; ChestTypeColors.push_back( t031 );
            double* t032 = new double[3]; t032[0] = 0.68; t032[1] = 0.68; t032[2] = 0.68; ChestTypeColors.push_back( t032 );
            double* t033 = new double[3]; t033[0] = 0.67; t033[1] = 0.67; t033[2] = 0.67; ChestTypeColors.push_back( t033 );
            double* t034 = new double[3]; t034[0] = 0.66; t034[1] = 0.66; t034[2] = 0.66; ChestTypeColors.push_back( t034 );
            double* t035 = new double[3]; t035[0] = 0.65; t035[1] = 0.65; t035[2] = 0.65; ChestTypeColors.push_back( t035 );
            double* t036 = new double[3]; t036[0] = 0.64; t036[1] = 0.64; t036[2] = 0.64; ChestTypeColors.push_back( t036 );
            double* t037 = new double[3]; t037[0] = 0.63; t037[1] = 0.63; t037[2] = 0.63; ChestTypeColors.push_back( t037 );
            double* t038 = new double[3]; t038[0] = 0.51; t038[1] = 0.50; t038[2] = 0.50; ChestTypeColors.push_back( t038 );
            double* t039 = new double[3]; t039[0] = 0.55; t039[1] = 0.27; t039[2] = 0.07; ChestTypeColors.push_back( t039 );
            double* t040 = new double[3]; t040[0] = 1.00; t040[1] = 0.65; t040[2] = 0.00; ChestTypeColors.push_back( t040 );
            double* t041 = new double[3]; t041[0] = 1.00; t041[1] = 1.00; t041[2] = 0.01; ChestTypeColors.push_back( t041 );
            double* t042 = new double[3]; t042[0] = 1.00; t042[1] = 0.01; t042[2] = 1.00; ChestTypeColors.push_back( t042 );
            double* t043 = new double[3]; t043[0] = 0.51; t043[1] = 1.00; t043[2] = 0.00; ChestTypeColors.push_back( t043 );
            double* t044 = new double[3]; t044[0] = 0.01; t044[1] = 0.50; t044[2] = 1.00; ChestTypeColors.push_back( t044 );
            double* t045 = new double[3]; t045[0] = 0.51; t045[1] = 0.00; t045[2] = 0.50; ChestTypeColors.push_back( t045 );
            double* t046 = new double[3]; t046[0] = 0.51; t046[1] = 0.50; t046[2] = 0.00; ChestTypeColors.push_back( t046 );
            double* t047 = new double[3]; t047[0] = 0.01; t047[1] = 0.50; t047[2] = 0.50; ChestTypeColors.push_back( t047 );
            double* t048 = new double[3]; t048[0] = 0.45; t048[1] = 0.44; t048[2] = 0.44; ChestTypeColors.push_back( t048 );
            double* t049 = new double[3]; t049[0] = 0.51; t049[1] = 0.51; t049[2] = 0.51; ChestTypeColors.push_back( t049 );
            double* t050 = new double[3]; t050[0] = 0.00; t050[1] = 0.00; t050[2] = 0.99; ChestTypeColors.push_back( t050 );
            double* t051 = new double[3]; t051[0] = 0.99; t051[1] = 0.00; t051[2] = 0.00; ChestTypeColors.push_back( t051 );
            double* t052 = new double[3]; t052[0] = 0.00; t052[1] = 0.99; t052[2] = 0.00; ChestTypeColors.push_back( t052 );
            double* t053 = new double[3]; t053[0] = 0.99; t053[1] = 0.01; t053[2] = 0.00; ChestTypeColors.push_back( t053 );
            double* t054 = new double[3]; t054[0] = 0.46; t054[1] = 0.46; t054[2] = 0.46; ChestTypeColors.push_back( t054 );
            double* t055 = new double[3]; t055[0] = 0.93; t055[1] = 0.01; t055[2] = 0.10; ChestTypeColors.push_back( t055 );
            double* t056 = new double[3]; t056[0] = 0.00; t056[1] = 0.00; t056[2] = 0.00; ChestTypeColors.push_back( t056 );
            double* t057 = new double[3]; t057[0] = 0.00; t057[1] = 1.00; t057[2] = 0.00; ChestTypeColors.push_back( t057 );
            double* t058 = new double[3]; t058[0] = 0.00; t058[1] = 1.00; t058[2] = 1.00; ChestTypeColors.push_back( t058 );
            double* t059 = new double[3]; t059[0] = 1.00; t059[1] = 1.00; t059[2] = 0.00; ChestTypeColors.push_back( t059 );
            double* t060 = new double[3]; t060[0] = 1.00; t060[1] = 0.00; t060[2] = 1.00; ChestTypeColors.push_back( t060 );
            double* t061 = new double[3]; t061[0] = 0.50; t061[1] = 1.00; t061[2] = 0.00; ChestTypeColors.push_back( t061 );
            double* t062 = new double[3]; t062[0] = 0.00; t062[1] = 0.50; t062[2] = 1.00; ChestTypeColors.push_back( t062 );
            double* t063 = new double[3]; t063[0] = 0.50; t063[1] = 0.00; t063[2] = 0.50; ChestTypeColors.push_back( t063 );
            double* t064 = new double[3]; t064[0] = 0.50; t064[1] = 0.50; t064[2] = 0.00; ChestTypeColors.push_back( t064 );
            double* t065 = new double[3]; t065[0] = 0.00; t065[1] = 0.50; t065[2] = 0.50; ChestTypeColors.push_back( t065 );
            double* t066 = new double[3]; t066[0] = 0.44; t066[1] = 0.44; t066[2] = 0.44; ChestTypeColors.push_back( t066 );
            double* t067 = new double[3]; t067[0] = 0.00; t067[1] = 0.68; t067[2] = 0.00; ChestTypeColors.push_back( t067 );
            double* t068 = new double[3]; t068[0] = 0.00; t068[1] = 0.69; t068[2] = 0.69; ChestTypeColors.push_back( t068 );
            double* t069 = new double[3]; t069[0] = 0.00; t069[1] = 0.00; t069[2] = 0.70; ChestTypeColors.push_back( t069 );
            double* t070 = new double[3]; t070[0] = 0.99; t070[1] = 0.01; t070[2] = 0.99; ChestTypeColors.push_back( t070 );
            double* t071 = new double[3]; t071[0] = 0.58; t071[1] = 0.65; t071[2] = 0.20; ChestTypeColors.push_back( t071 );
            double* t072 = new double[3]; t072[0] = 0.85; t072[1] = 0.75; t072[2] = 0.85; ChestTypeColors.push_back( t072 );
            double* t073 = new double[3]; t073[0] = 1.00; t073[1] = 0.02; t073[2] = 0.00; ChestTypeColors.push_back( t073 );
            double* t074 = new double[3]; t074[0] = 0.98; t074[1] = 0.50; t074[2] = 0.45; ChestTypeColors.push_back( t074 );
            double* t075 = new double[3]; t075[0] = 0.00; t075[1] = 0.03; t075[2] = 1.00; ChestTypeColors.push_back( t075 );
            double* t076 = new double[3]; t076[0] = 0.25; t076[1] = 0.88; t076[2] = 0.82; ChestTypeColors.push_back( t076 );
            double* t077 = new double[3]; t077[0] = 0.25; t077[1] = 0.88; t077[2] = 0.81; ChestTypeColors.push_back( t077 );
            double* t078 = new double[3]; t078[0] = 0.25; t078[1] = 0.87; t078[2] = 0.81; ChestTypeColors.push_back( t078 );
            double* t079 = new double[3]; t079[0] = 0.25; t079[1] = 0.86; t079[2] = 0.81; ChestTypeColors.push_back( t079 );
            double* t080 = new double[3]; t080[0] = 0.90; t080[1] = 0.00; t080[2] = 0.00; ChestTypeColors.push_back( t080 );
            double* t081 = new double[3]; t081[0] = 0.91; t081[1] = 0.00; t081[2] = 0.00; ChestTypeColors.push_back( t081 );
            double* t082 = new double[3]; t082[0] = 0.92; t082[1] = 0.00; t082[2] = 0.00; ChestTypeColors.push_back( t082 );
            double* t083 = new double[3]; t083[0] = 0.93; t083[1] = 0.00; t083[2] = 0.00; ChestTypeColors.push_back( t083 );
            double* t084 = new double[3]; t084[0] = 0.94; t084[1] = 0.00; t084[2] = 0.00; ChestTypeColors.push_back( t084 );
            double* t085 = new double[3]; t085[0] = 0.01; t085[1] = 0.02; t085[2] = 0.01; ChestTypeColors.push_back( t085 );
            double* t086 = new double[3]; t086[0] = 0.01; t086[1] = 0.02; t086[2] = 0.02; ChestTypeColors.push_back( t086 );
            double* t087 = new double[3]; t087[0] = 0.01; t087[1] = 0.02; t087[2] = 0.03; ChestTypeColors.push_back( t087 );
            double* t088 = new double[3]; t088[0] = 0.01; t088[1] = 0.02; t088[2] = 0.04; ChestTypeColors.push_back( t088 );
            double* t089 = new double[3]; t089[0] = 0.01; t089[1] = 0.03; t089[2] = 0.04; ChestTypeColors.push_back( t089 );
            double* t090 = new double[3]; t090[0] = 0.02; t090[1] = 0.03; t090[2] = 0.04; ChestTypeColors.push_back( t090 );
            double* t091 = new double[3]; t091[0] = 0.03; t091[1] = 0.03; t091[2] = 0.04; ChestTypeColors.push_back( t091 );
            double* t092 = new double[3]; t092[0] = 0.04; t092[1] = 0.03; t092[2] = 0.04; ChestTypeColors.push_back( t092 );
            double* t093 = new double[3]; t093[0] = 0.05; t093[1] = 0.03; t093[2] = 0.04; ChestTypeColors.push_back( t093 );
            double* t094 = new double[3]; t094[0] = 0.05; t094[1] = 0.03; t094[2] = 0.05; ChestTypeColors.push_back( t094 );
            double* t095 = new double[3]; t095[0] = 0.05; t095[1] = 0.03; t095[2] = 0.06; ChestTypeColors.push_back( t095 );
            double* t096 = new double[3]; t096[0] = 0.05; t096[1] = 0.03; t096[2] = 0.07; ChestTypeColors.push_back( t096 );
            double* t097 = new double[3]; t097[0] = 0.05; t097[1] = 0.03; t097[2] = 0.08; ChestTypeColors.push_back( t097 );
            double* t098 = new double[3]; t098[0] = 0.05; t098[1] = 0.03; t098[2] = 0.09; ChestTypeColors.push_back( t098 );
            double* t099 = new double[3]; t099[0] = 0.05; t099[1] = 0.04; t099[2] = 0.1; ChestTypeColors.push_back( t099 );
            double* t100 = new double[3]; t100[0] = 0.05; t100[1] = 0.05; t100[2] = 0.11; ChestTypeColors.push_back( t100 );

            double* t101 = new double[3]; t101[0] = 0.00; t101[1] = 0.00; t101[2] = 0.00; ChestRegionColors.push_back( t101 );
            double* t102 = new double[3]; t102[0] = 0.42; t102[1] = 0.38; t102[2] = 0.75; ChestRegionColors.push_back( t102 );
            double* t103 = new double[3]; t103[0] = 0.26; t103[1] = 0.64; t103[2] = 0.10; ChestRegionColors.push_back( t103 );
            double* t104 = new double[3]; t104[0] = 0.80; t104[1] = 0.11; t104[2] = 0.36; ChestRegionColors.push_back( t104 );
            double* t105 = new double[3]; t105[0] = 0.94; t105[1] = 0.00; t105[2] = 0.00; ChestRegionColors.push_back( t105 );
            double* t106 = new double[3]; t106[0] = 0.05; t106[1] = 1.00; t106[2] = 0.00; ChestRegionColors.push_back( t106 );
            double* t107 = new double[3]; t107[0] = 0.06; t107[1] = 0.00; t107[2] = 1.00; ChestRegionColors.push_back( t107 );
            double* t108 = new double[3]; t108[0] = 0.97; t108[1] = 1.00; t108[2] = 0.00; ChestRegionColors.push_back( t108 );
            double* t109 = new double[3]; t109[0] = 0.08; t109[1] = 1.00; t109[2] = 1.00; ChestRegionColors.push_back( t109 );
            double* t110 = new double[3]; t110[0] = 0.95; t110[1] = 0.03; t110[2] = 0.03; ChestRegionColors.push_back( t110 );
            double* t111 = new double[3]; t111[0] = 0.95; t111[1] = 0.89; t111[2] = 0.03; ChestRegionColors.push_back( t111 );
            double* t112 = new double[3]; t112[0] = 0.03; t112[1] = 0.34; t112[2] = 0.95; ChestRegionColors.push_back( t112 );
            double* t113 = new double[3]; t113[0] = 0.06; t113[1] = 0.91; t113[2] = 0.91; ChestRegionColors.push_back( t113 );
            double* t114 = new double[3]; t114[0] = 1.00; t114[1] = 0.00; t114[2] = 0.91; ChestRegionColors.push_back( t114 );
            double* t115 = new double[3]; t115[0] = 0.34; t115[1] = 0.41; t115[2] = 0.09; ChestRegionColors.push_back( t115 );
            double* t116 = new double[3]; t116[0] = 0.00; t116[1] = 0.06; t116[2] = 0.00; ChestRegionColors.push_back( t116 );
            double* t117 = new double[3]; t117[0] = 0.00; t117[1] = 0.07; t117[2] = 0.00; ChestRegionColors.push_back( t117 );
            double* t118 = new double[3]; t118[0] = 0.00; t118[1] = 0.08; t118[2] = 0.00; ChestRegionColors.push_back( t118 );
            double* t119 = new double[3]; t119[0] = 0.00; t119[1] = 0.09; t119[2] = 0.00; ChestRegionColors.push_back( t119 );
            double* t120 = new double[3]; t120[0] = 0.00; t120[1] = 0.00; t120[2] = 0.01; ChestRegionColors.push_back( t120 );
            double* t121 = new double[3]; t121[0] = 0.00; t121[1] = 0.00; t121[2] = 0.02; ChestRegionColors.push_back( t121 );
            double* t122 = new double[3]; t122[0] = 0.00; t122[1] = 0.00; t122[2] = 0.03; ChestRegionColors.push_back( t122 );
            double* t123 = new double[3]; t123[0] = 0.00; t123[1] = 0.00; t123[2] = 0.04; ChestRegionColors.push_back( t123 );
            double* t124 = new double[3]; t124[0] = 0.99; t124[1] = 0.00; t124[2] = 0.00; ChestRegionColors.push_back( t124 );
            double* t125 = new double[3]; t125[0] = 0.00; t125[1] = 0.99; t125[2] = 0.00; ChestRegionColors.push_back( t125 );
            double* t126 = new double[3]; t126[0] = 0.66; t126[1] = 0.36; t126[2] = 0.40; ChestRegionColors.push_back( t126 );
            double* t127 = new double[3]; t127[0] = 1.00; t127[1] = 1.00; t127[2] = 0.01; ChestRegionColors.push_back( t127 );
            double* t128 = new double[3]; t128[0] = 1.00; t128[1] = 0.50; t128[2] = 0.01; ChestRegionColors.push_back( t128 );
            double* t129 = new double[3]; t129[0] = 1.00; t129[1] = 0.51; t129[2] = 0.01; ChestRegionColors.push_back( t129 );
            double* t130 = new double[3]; t130[0] = 0.49; t130[1] = 0.49; t130[2] = 0.49; ChestRegionColors.push_back( t130 );
            double* t131 = new double[3]; t131[0] = 0.49; t131[1] = 0.49; t131[2] = 0.50; ChestRegionColors.push_back( t131 );
            double* t132 = new double[3]; t132[0] = 0.49; t132[1] = 0.49; t132[2] = 0.51; ChestRegionColors.push_back( t132 );
            double* t133 = new double[3]; t133[0] = 0.49; t133[1] = 0.49; t133[2] = 0.52; ChestRegionColors.push_back( t133 );
            double* t134 = new double[3]; t134[0] = 0.49; t134[1] = 0.49; t134[2] = 0.53; ChestRegionColors.push_back( t134 );
            double* t135 = new double[3]; t135[0] = 0.49; t135[1] = 0.49; t135[2] = 0.54; ChestRegionColors.push_back( t135 );
            double* t136 = new double[3]; t136[0] = 0.49; t136[1] = 0.49; t136[2] = 0.55; ChestRegionColors.push_back( t136 );
            double* t137 = new double[3]; t137[0] = 0.49; t137[1] = 0.49; t137[2] = 0.56; ChestRegionColors.push_back( t137 );
            double* t138 = new double[3]; t138[0] = 0.49; t138[1] = 0.49; t138[2] = 0.57; ChestRegionColors.push_back( t138 );
            double* t139 = new double[3]; t139[0] = 0.49; t139[1] = 0.49; t139[2] = 0.58; ChestRegionColors.push_back( t139 );
            double* t140 = new double[3]; t140[0] = 0.49; t140[1] = 0.49; t140[2] = 0.59; ChestRegionColors.push_back( t140 );
            double* t141 = new double[3]; t141[0] = 0.49; t141[1] = 0.49; t141[2] = 0.60; ChestRegionColors.push_back( t141 );
            double* t142 = new double[3]; t142[0] = 0.49; t142[1] = 0.49; t142[2] = 0.61; ChestRegionColors.push_back( t142 );
            double* t143 = new double[3]; t143[0] = 0.49; t143[1] = 0.49; t143[2] = 0.62; ChestRegionColors.push_back( t143 );
            double* t144 = new double[3]; t144[0] = 0.49; t144[1] = 0.49; t144[2] = 0.63; ChestRegionColors.push_back( t144 );
            double* t145 = new double[3]; t145[0] = 0.49; t145[1] = 0.49; t145[2] = 0.64; ChestRegionColors.push_back( t145 );
            double* t146 = new double[3]; t146[0] = 0.49; t146[1] = 0.49; t146[2] = 0.65; ChestRegionColors.push_back( t146 );
            double* t147 = new double[3]; t147[0] = 0.49; t147[1] = 0.49; t147[2] = 0.66; ChestRegionColors.push_back( t147 );
            double* t148 = new double[3]; t148[0] = 0.49; t148[1] = 0.49; t148[2] = 0.68; ChestRegionColors.push_back( t148 );
            double* t149 = new double[3]; t149[0] = 0.49; t149[1] = 0.49; t149[2] = 0.69; ChestRegionColors.push_back( t149 );
            double* t150 = new double[3]; t150[0] = 0.49; t150[1] = 0.49; t150[2] = 0.70; ChestRegionColors.push_back( t150 );
            double* t151 = new double[3]; t151[0] = 0.49; t151[1] = 0.49; t151[2] = 0.71; ChestRegionColors.push_back( t151 );
            double* t152 = new double[3]; t152[0] = 0.49; t152[1] = 0.49; t152[2] = 0.72; ChestRegionColors.push_back( t152 );
            double* t153 = new double[3]; t153[0] = 0.49; t153[1] = 0.49; t153[2] = 0.73; ChestRegionColors.push_back( t153 );
            double* t154 = new double[3]; t154[0] = 0.49; t154[1] = 0.49; t154[2] = 0.74; ChestRegionColors.push_back( t154 );
            double* t155 = new double[3]; t155[0] = 0.49; t155[1] = 0.49; t155[2] = 0.75; ChestRegionColors.push_back( t155 );
            double* t156 = new double[3]; t156[0] = 0.49; t156[1] = 0.49; t156[2] = 0.76; ChestRegionColors.push_back( t156 );
            double* t157 = new double[3]; t157[0] = 0.49; t157[1] = 0.49; t157[2] = 0.77; ChestRegionColors.push_back( t157 );
            double* t158 = new double[3]; t158[0] = 0.49; t158[1] = 0.49; t158[2] = 0.78; ChestRegionColors.push_back( t158 );
            double* t159 = new double[3]; t159[0] = 0.49; t159[1] = 0.49; t159[2] = 0.79; ChestRegionColors.push_back( t159 );
            double* t160 = new double[3]; t160[0] = 0.49; t160[1] = 0.49; t160[2] = 0.80; ChestRegionColors.push_back( t160 );
            double* t161 = new double[3]; t161[0] = 0.49; t161[1] = 0.49; t161[2] = 0.81; ChestRegionColors.push_back( t161 );
            double* t162 = new double[3]; t162[0] = 0.49; t162[1] = 0.49; t162[2] = 0.82; ChestRegionColors.push_back( t162 );
            double* t163 = new double[3]; t163[0] = 0.49; t163[1] = 0.49; t163[2] = 0.83; ChestRegionColors.push_back( t163 );
            double* t164 = new double[3]; t164[0] = 0.49; t164[1] = 0.49; t164[2] = 0.84; ChestRegionColors.push_back( t164 );
            double* t165 = new double[3]; t165[0] = 0.49; t165[1] = 0.49; t165[2] = 0.85; ChestRegionColors.push_back( t165 );
            double* t166 = new double[3]; t166[0] = 0.49; t166[1] = 0.49; t166[2] = 0.86; ChestRegionColors.push_back( t166 );
            double* t167 = new double[3]; t167[0] = 0.49; t167[1] = 0.49; t167[2] = 0.87; ChestRegionColors.push_back( t167 );
            double* t168 = new double[3]; t168[0] = 0.49; t168[1] = 0.49; t168[2] = 0.88; ChestRegionColors.push_back( t168 );
            double* t169 = new double[3]; t169[0] = 0.49; t169[1] = 0.49; t169[2] = 0.89; ChestRegionColors.push_back( t169 );
            double* t170 = new double[3]; t170[0] = 0.49; t170[1] = 0.49; t170[2] = 0.9; ChestRegionColors.push_back( t170 );
            double* t171 = new double[3]; t171[0] = 0.49; t171[1] = 0.49; t171[2] = 0.91; ChestRegionColors.push_back( t171 );
            double* t172 = new double[3]; t172[0] = 0.49; t172[1] = 0.49; t172[2] = 0.92; ChestRegionColors.push_back( t172 );
            double* t173 = new double[3]; t173[0] = 0.49; t173[1] = 0.49; t173[2] = 0.835; ChestRegionColors.push_back( t173 );
            double* t174 = new double[3]; t174[0] = 0.49; t174[1] = 0.49; t174[2] = 0.845; ChestRegionColors.push_back( t174 );
            double* t175 = new double[3]; t175[0] = 0.49; t175[1] = 0.49; t175[2] = 0.8355; ChestRegionColors.push_back( t175 );
            double* t176 = new double[3]; t176[0] = 0.49; t176[1] = 0.49; t176[2] = 0.8455; ChestRegionColors.push_back( t176 );
            double* t177 = new double[3]; t177[0] = 0.49; t177[1] = 0.49; t177[2] = 0.93; ChestRegionColors.push_back( t177 );
            double* t178 = new double[3]; t178[0] = 0.49; t178[1] = 0.9; t178[2] = 0.93; ChestRegionColors.push_back( t178 );
            double* t179 = new double[3]; t179[0] = 0.49; t179[1] = 0.8; t179[2] = 0.93; ChestRegionColors.push_back( t179 );


        }
    };
}

#endif //CIP_CIPCHESTCONVENTIONSXMLAUTOGENERATED_H


